{"title":"Visualizing Strava Activities","markdown":{"yaml":{"title":"Visualizing Strava Activities","date":"2023-08-20","editor":"source","description":"Mapping Strava activity data onto contour maps.","categories":["R","Data Visualization","Spatial Data"],"image":"thumb.png","format":{"html":{"code-fold":true,"code-tools":true}}},"headingText":"Visualizing Strava Data Collected from the rStrava","containsRefs":false,"markdown":"\n\n\nI've wanted to write a blog post making some data visualization using the Strava API \nfor some time however was never able to come up with a cool idea that wasnt already \ncommon among others blogs. \n\nFor example, there is the [Marcus Volz Strava package](https://marcusvolz.com/strava/) \nwhich allows you to make some cool visualizations using your Strava data. \n\nRather than repeat the same usual Strava plots, I've focused on mapping \nsome of the hikes I recently went on during a hiking trip in the Rocky Mountains. \n\nThe goal is to overlay the GPX Strava data with topographic maps of the area \nto make a set of posters I can print out to commemorate the trip. \n\n\n## Collecting the data from Strava\n\nI use the rStrava package to read in the activity data. This package \nmakes the process very straight forward. \n\nLet's download the hiking data using rStrava. It is pretty straight forward to \nlink authenticate your account, the process is covered [at the rStrava Github](https://github.com/fawda123/rStrava) in detail. \n\n```{r, echo=FALSE}\n# code to read in the data from local dir\npacman::p_load(rStrava, dplyr, sf, purrr, tmap, raster)\nsource(\"secrets.R\")\n\n# create the authentication token\nstoken <- httr::config(\n  token = strava_oauth(\n    app_name,\n    app_client_id,\n    app_secret,\n    app_scope = \"activity:read_all\",\n    cache = TRUE)) \n\nCOLLECT_ACIVITIES = FALSE\n\nif(COLLECT_ACIVITIES) {\n  activities = stoken |> \n    get_activity_list() |> \n    compile_activities() |>\n    filter(start_date_local >= as.Date(\"2023/07/15\"),\n           start_date_local <= as.Date(\"2023/07/23\"))\n  \n  write.csv(activities, \"strava_activities.csv\")\n} else {\n  activities = read.csv(\"strava_activities.csv\")\n}\n\ngp2sf <- function(gp) {\n  gp |> \n    googlePolylines::decode() |> \n    map_dfr(\n      function(df) {\n        df |> \n          st_as_sf(coords = c(\"lon\", \"lat\")) |> \n          st_combine() |> \n          st_cast(\"LINESTRING\") |> \n          st_sf() \n      }) |> \n    pull(1)\n}\n\n```\n\n\n```{r, eval=FALSE}\n# packages used\npacman::p_load(rStrava, dplyr, sf, purrr, tmap, raster)\n\n# strava authenticaion \napp_name      = \"XXXXXXXXXX\"\napp_client_id = \"XXXXXXXXXX\"\napp_secret    = \"XXXXXXXXXX\"\n\nstoken = httr::config(\n  token = strava_oauth(\n    app_name = app_name,\n    app_client_id = app_client_id,\n    app_secret = app_secret,\n    app_scope = \"activity:read_all\",\n    cache = TRUE\n  )\n)\n\nactivities = stoken |> \n    get_activity_list() |> \n    compile_activities() |>\n    filter(start_date_local >= as.Date(\"2023/07/15\"),\n           start_date_local <= as.Date(\"2023/07/23\"))\n\n```\n\nWith the data, lets make a quick plot of one of the activities. I came across \na useful approach to convert the rStrava activity polyline to a simple \nfeature object in this [blog by r.iresmi.net](https://r.iresmi.net/posts/2023/map_your_strava_activities/). \n\n```{r, warning=FALSE, message=FALSE}\ngp2sf = function(gp) {\n  gp |> \n    googlePolylines::decode() |> \n    map_dfr(function(df) {\n      df |> \n        st_as_sf(coords = c(\"lon\", \"lat\")) |> \n        st_combine() |> \n        st_cast(\"LINESTRING\") |> \n        st_sf() }) |> \n    pull(1)\n}\n  \n# plot hike \nhike = activities |> \n  filter(name == \"Edith Cavell Peak\")\n\ngpx = hike |> \n    mutate(geom = gp2sf(map.summary_polyline)) |> \n    st_sf(crs = \"EPSG:4326\") \n\nmap = tm_shape(gpx) + \n  tm_lines()\n\nmap\n```\n\nI am plotting the data as a thematic map using the [tmap](https://r-tmap.github.io/tmap/) \npackage. I've enjoyed using this package as it has many built in features for \ncustomizing maps and follows a similar syntax to `ggplot`.\n\n```{r, warning=FALSE, message=FALSE}\nmap1 = map + \n  tm_style(\"classic\") + \n  tm_layout(title = \"Edith Cavell Peak\", title.position = c(\"center\", \"top\"))\n\n\nmap2 = map + \n  tm_style(\"cobalt\") + \n  tm_layout(main.title = \"Edith Cavell Peak\", \n            main.title.position = c(\"left\")) + \n  tm_compass(type = \"8star\", position=\"left\", size = 1)\n\nmap3 = map + \n  tm_style(\"bw\") + \n  tm_layout(frame = FALSE) + \n  tm_compass(type = \"arrow\", position=\"left\", size = 1)\n\ntext = sprintf(\"%s\\nHiked on %s\", gpx$name, format(as.Date(gpx$start_date), \"%B %e, %Y\"))\n\nmap4 = map + \n  tm_style(\"albatross\") + \n  tm_credits(text = text, position = c(\"LEFT\", \"BOTTOM\")) + \n  tm_compass(type = \"rose\", position=c(\"right\", \"top\"), size = 2)\n\ntmap_arrange(map1, map2, map3, map4, nrow = 2)\n```\n\n## Adding in the topographic lines\n\nNow that we have the GPX data in our plot, we need to add the contour lines. \nThis is the trickier portion of the project, and is my motivation for writing \nthese steps into a blog post as it wasn't obvious first where to get the topographic \ndata from, and then how to overlay the information with the Strava GPX data. \n\nThe `raster` package does all of the heavy lifting here. From `raster` \nI collect the elevation data using `getData(\"SRTM\", lon, lat)` which returns  \n90m raster data based on the latitude-longitude coordinates provided. \n\n```{r, warning=FALSE, message=FALSE}\nelevation_data = getData(\"SRTM\", lon = gpx$end_latlng2, lat = gpx$end_latlng1)\n\ntm_shape(elevation_data) + \n  tm_raster() + \n  tm_style(\"albatross\") + \n  tm_layout(legend.bg.color = \"white\", \n            legend.text.color = \"black\", \n            legend.title.color = \"black\", \n            legend.position = c(\"right\", \"top\"))\n```\n\nNotice the raster data returned covers alot of land. We will need to crop this \ndown so that we can see the GPX hike data once we add it to the plot. \nI'm able to crop the raster using the bounding box of the GPX data. \n\n```{r, warning=FALSE, message=FALSE}\nbbox = st_bbox(gpx)\n\nlat = (bbox$ymax + bbox$ymin)/2\nlng = (bbox$xmax + bbox$xmin)/2\ndelta = 0.0275\n\nzoomed_data = raster::crop(\n  elevation_data, extent(\n    lng - delta, \n    lng + delta,\n    lat - delta,\n    lat + delta\n  )\n)\n\ntm_shape(zoomed_data) +\n  tm_raster() +\n  tm_style(\"albatross\") +\n  tm_layout(\n    legend.bg.color = \"white\",\n    legend.text.color = \"black\",\n    legend.title.color = \"black\",\n    legend.position = c(\"right\", \"top\")\n  )\n\n```\n\nMoving from the raster data to contour lines is simple with the `raster::rasterToCountor()`\nfunction. \nThe `tm_iso` function will plot the countour lines and will include the elevation labels.\n\n```{r, warning=FALSE, message=FALSE}\ncontour_lines = rasterToContour(zoomed_data)\n\ntm_shape(contour_lines) + \n  tm_iso()\n```\n\nAdding the GPX data to the contour lines is as simple as adding in an additional \nfeature to the plot. \n\n```{r, warning=FALSE, message=FALSE}\ntm_shape(contour_lines) + \n  tm_iso() + \n  tm_shape(gpx) + \n  tm_lines(col = \"grey20\", lwd = 3) + \n  tm_style(\"bw\") + \n  tm_layout(frame.double.line = TRUE)\n\n```\n\nFinally, we can finish this off by adding in some formatting and labelling \nbased on the metadata collected from Strava. Here are some theme options to \nshow off the plot. \n\n```{r, warning=FALSE, message=FALSE}\ninfo_card = sprintf(\"%s\\n%s\\nDistance: %s km\\nElevation: %s m\", \n                    format(as.Date(gpx$start_date), \"%B %e, %Y\"),\n                    \"Jasper, Alberta\", \n                    round(gpx$distance, 2), \n                    round(gpx$elev_high - gpx$elev_low, 2))\n\n\ndark = tm_shape(contour_lines) + \n  tm_iso(along.lines = FALSE, size = 0.5, bg.col = \"#3c444d\", col = \"#535f6b\") + \n  tm_shape(gpx) + \n  tm_lines(col = \"#965251\", lwd = 3) + \n  tm_style(\"cobalt\") + \n  tm_credits(text = info_card, \n             bg.color = \"#3c444d\", \n             position = c(\"LEFT\", \"TOP\")) + \n  tm_layout(frame = TRUE, \n            frame.double.line=TRUE, \n            bg.color = \"#3c444d\", \n            main.title = gpx$name, \n            main.title.position = c(\"center\", \"TOP\"), \n            main.title.color = \"#3c444d\") \n\nlight = tm_shape(contour_lines) + \n  tm_iso(along.lines = FALSE) + \n  tm_shape(gpx) + \n  tm_lines(lwd = 2) + \n  tm_style(\"classic\") + \n  tm_layout(frame=TRUE, frame.double.line = FALSE) + \n  tm_credits(text = gpx$name, position = c(\"center\", \"TOP\"), width = 1, align = \"center\", bg.color = \"white\", size = 1)\n\ntmap_arrange(dark, light, nrow = 1)\n\n# design 3: landscape fitting hike better\nelevation_data = getData(\"SRTM\", lon = gpx$end_latlng2, lat = gpx$end_latlng1)\nbbox = st_bbox(gpx)\n\nlat = (bbox$ymax + bbox$ymin)/2\nlng = (bbox$xmax + bbox$xmin)/2\ndelta = 0.002\n\nzoomed_data = raster::crop(\n  elevation_data, extent(\n    bbox$xmin - delta, \n    bbox$xmax + delta,\n    bbox$ymin - delta,\n    bbox$ymax + delta)\n)\n\ncontour_lines = rasterToContour(zoomed_data)\n\nlandscape = tm_shape(contour_lines) + \n  tm_iso(along.lines = FALSE) + \n  tm_shape(gpx) + \n  tm_lines(col = \"grey20\", lwd = 3) + \n  tm_style(\"classic\") \n\ntmap_save(tm = landscape, filename = \"thumb.png\", width = 4)\nlandscape\n```\n\n\n```{r, warning=FALSE, message=FALSE, echo=FALSE}\n# Drop Wapta Falls as is more of a walk than a hike\nactivities = activities |> \n  filter(name != \"Wapta Falls\")\n\n# portrait \nposters_p = lapply(split(activities, activities$name), FUN = function(x) {\n\n  if(x$name %in% c(\"Wilcox Viewpoint\", \"Edith Cavell Peak\")) {\n    city = \"Jasper, Alberta\"\n    } else {\n    city = \"Yoho, British Columbia\"\n    }\n  \n  title_cards = sprintf(\"%s\\n%s\\nDistance: %s km\\nElevation: %s m\", \n                      city, \n                      format(as.Date(x$start_date), \"%B %e, %Y\"),\n                      round(x$distance, 2), \n                      round(x$elev_high - x$elev_low, 2))\n  \n  # generate hike path\n  line_data = x |> \n    mutate(geom = gp2sf(map.summary_polyline)) |> \n    st_sf(crs = \"EPSG:4326\")\n  \n  # get topographic data & set boundary for plot\n  bbox = st_bbox(line_data)\n  lat = (bbox$ymax + bbox$ymin)/2\n  lng = (bbox$xmax + bbox$xmin)/2\n  delta = 0.0275\n  \n  elevation_data <- getData(\"SRTM\", lon = lng, lat = lat)\n  zoom_extent <- extent(lng - delta, \n                        lng + delta, \n                        lat - delta, \n                        lat + delta)\n  zoomed_data <- raster::crop(elevation_data, zoom_extent)\n  contour_lines = rasterToContour(zoomed_data)\n  \n  # make plot \n  out = tm_shape(contour_lines) + \n    tm_iso(along.lines = FALSE, size = 0.5, bg.col = \"#3c444d\", col = \"#535f6b\") + \n    tm_shape(line_data) + \n    tm_lines(col = \"#965251\", lwd = 3) + \n    tm_style(\"cobalt\") +\n    tm_credits(text = title_cards, bg.color = \"#3c444d\", position = c(\"LEFT\", \"TOP\")) + \n    tm_layout(frame = TRUE, frame.double.line=TRUE, bg.color = \"#3c444d\", \n              main.title = x$name, main.title.position = c(\"center\", \"TOP\"), main.title.color = \"#3c444d\") \n \n  tmap_save(tm = out, width = 3.0, height = 5.0)\n\n})\n\n\n# landscape\nposters_l = lapply(split(activities, activities$name), FUN = function(x) {\n\n  if(x$name %in% c(\"Wilcox Viewpoint\", \"Edith Cavell Peak\")) {\n    city = \"Jasper, Alberta\"\n    } else {\n    city = \"Yoho, British Columbia\"\n    }\n  \n  title_cards = sprintf(\"%s\\n%s\\nDistance: %s km\\nElevation: %s m\", \n                      city, \n                      format(as.Date(x$start_date), \"%B %e, %Y\"),\n                      round(x$distance, 2), \n                      round(x$elev_high - x$elev_low, 2))\n  \n  # generate hike path\n  line_data = x |> \n    mutate(geom = gp2sf(map.summary_polyline)) |> \n    st_sf(crs = \"EPSG:4326\")\n  \n  # get topographic data & set boundary for plot\n  bbox = st_bbox(line_data)\n  lat = (bbox$ymax + bbox$ymin)/2\n  lng = (bbox$xmax + bbox$xmin)/2\n  delta = 0.003\n  \n  elevation_data <- getData(\"SRTM\", lon = lng, lat = lat)\n  zoomed_data = raster::crop(\n    elevation_data, extent(\n      bbox$xmin - delta, \n      bbox$xmax + delta,\n      bbox$ymin - delta - 0.002, # for text in bottom\n      bbox$ymax + delta)\n  )\n  contour_lines = rasterToContour(zoomed_data)\n  \n  # make plot \n  out = tm_shape(contour_lines) + \n    tm_iso(along.lines = FALSE) + \n    tm_shape(line_data) + \n    tm_lines(col = \"grey20\", lwd = 3) + \n    tm_style(\"classic\") + \n    tm_layout(frame.double.line = TRUE) + \n    tm_credits(text = sprintf(\"%s\\n%s\", x$name, format(as.Date(x$start_date), \"%B %e, %Y\")), \n               position = c(\"center\", \"BOTTOM\"), bg.color = \"white\", align=\"center\")\n \n  tmap_save(tm = out, width = 3.0, height = 5.0)\n\n})\n\nposters_l[[1]]\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.313","theme":{"light":["sandstone","../../_light.scss"],"dark":["sandstone","../../_dark.scss"]},"editor":"source","title":"Visualizing Strava Activities","date":"2023-08-20","description":"Mapping Strava activity data onto contour maps.","categories":["R","Data Visualization","Spatial Data"],"image":"thumb.png"},"extensions":{"book":{"multiFile":true}}}}}
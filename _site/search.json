[
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Jordan Hutchings",
    "section": "",
    "text": "The impact of easing stay at home orders on US businesses during the COVID-19 pandemic\n\nM.A. Economics Summer Paper, draft\n\nDoes Yelp impact where we choose to eat?\n\nUndergraduate Thesis, draft, poster"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jordan Hutchings",
    "section": "",
    "text": "Hello! I am a Quantitative Marketing Ph.D. student at the University of Toronto. I hold an MA in Economics from the University of British Columbia, where I additionally worked as a pre-doctoral researcher for professors Matt Lowe and Patrick Baylis at the Center for Innovative Data in Economics Research.\nMy research revolves around causal inference, industrial organization, and applied microeconomics. I also like to write about sports analytics, data visualization, and using R to simplify everyday challenges.\nFeel free to have a look around!"
  },
  {
    "objectID": "blog/2022-08-10-plotting-dynamic-maps-with-mapview/index.html",
    "href": "blog/2022-08-10-plotting-dynamic-maps-with-mapview/index.html",
    "title": "Plotting dynamic maps with mapview",
    "section": "",
    "text": "I’ve spent a lot of time working with spatial data recently, and came across a cool tool to display maps that I thought was worth writing about. Here are some of the cool features you can find in mapview.\nI’ll be using the included breweries, and franconia datasets to show off some of the features I found useful for making dynamic maps."
  },
  {
    "objectID": "blog/2022-08-10-plotting-dynamic-maps-with-mapview/index.html#overlaying-points-on-a-polygon",
    "href": "blog/2022-08-10-plotting-dynamic-maps-with-mapview/index.html#overlaying-points-on-a-polygon",
    "title": "Plotting dynamic maps with mapview",
    "section": "Overlaying points on a polygon",
    "text": "Overlaying points on a polygon\nMapview can stack maps on each other with ease. For example, we can take the shape files from the franconia data, and overlay the breweries’ coordinates on the same map. Notice when you click on either a point or polygon you get information about the specific data.\n\npacman::p_load(mapview, leafsync, leaflet.extras2, dplyr)\n\nregions = mapview(franconia,\n  zcol = \"NAME_ASCI\",\n  legend = FALSE\n)\n\nbrew = mapview(breweries,\n  legend = FALSE,\n  cex = breweries$number.of.types, # size based on number of beers\n  col.regions = \"white\") # color points white \n\nregions + brew\n\n\n\n\n\n\n\nComparing two maps side by side\nOne of the cooler features I’ve come across comes from leafsync::sync(), which allows you to place two mapview maps next to each other, and mirror the location of your mouse from one map to the next. Admittedly this isn’t the best usecase for this comparison, but lets compare the maps showing breweries founded before the year 1800 and after.\n\nCUTOFF = 1800\nmap_pre = regions + \n  mapview(breweries |>\n            filter(founded < CUTOFF),\n          legend = FALSE,\n          col.regions = \"blue\")\n\nmap_post = regions + \n  mapview(breweries |>\n            filter(founded >= CUTOFF),\n          legend = FALSE,\n          col.regions = \"green\")\n\nsync(map_pre, map_post)\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdditionally, you can add a slider to compare the two maps in the same map.\n\nmap_pre | map_post\n\n\n\n\n\n\nI’m sure there is plenty more use cases and functionality available within mapview, but these are some of the cases I’ve come across that I’ve found helpful in my workflow."
  },
  {
    "objectID": "blog/2022-06-12-masters-fantasy-golf-tournament-dashboard/index.html",
    "href": "blog/2022-06-12-masters-fantasy-golf-tournament-dashboard/index.html",
    "title": "Masters Fantasy Golf Tournament Dashboard",
    "section": "",
    "text": "This blog posts shows how I use the cronR package to automate a fantasy golf pool with some friends for the golf major tournaments.\nThe process takes four steps:\nLets use the 2022 Masters tournament as an example of how we set up the pipeline."
  },
  {
    "objectID": "blog/2022-06-12-masters-fantasy-golf-tournament-dashboard/index.html#collecting-leaderboard-data",
    "href": "blog/2022-06-12-masters-fantasy-golf-tournament-dashboard/index.html#collecting-leaderboard-data",
    "title": "Masters Fantasy Golf Tournament Dashboard",
    "section": "Collecting Leaderboard Data",
    "text": "Collecting Leaderboard Data\nI’ve found success using two different methods here. Either through rvest to web scrape the leader board data off the web, i.e. ESPN Leaderboard, or through an API. The API route takes more work, but I’ve found the ESPN Developer API to work well during the tournament. Here is the endpoint: https://site.api.espn.com/apis/site/v2/sports/golf/pga/scoreboard.\nFor this demo, we will use the web scraping approach, as there is no guarantee the API will work in the future.\n\n# packages \nlibrary(rvest)\nlibrary(googlesheets4) \nlibrary(cronR)\nlibrary(kableExtra) \nlibrary(dplyr)\nlibrary(tidyr)\n\n\nurl = \"https://www.espn.com/golf/leaderboard?tournamentId=401353232\"\n\ncontent = read_html(url)\nscores = content %>% \n  html_table() %>%\n  bind_rows() %>%\n  select(-1)\n\nscores %>%\n  kbl() %>%\n  kable_paper(\"striped\") %>%\n  scroll_box(height = \"500px\")\n\n\n\n \n  \n    POS \n    PLAYER \n    SCORE \n    R1 \n    R2 \n    R3 \n    R4 \n    TOT \n    EARNINGS \n    FEDEX PTS \n  \n \n\n  \n    1 \n    Scottie Scheffler \n    -10 \n    69 \n    67 \n    71 \n    71 \n    278 \n    $2,700,000 \n    600 \n  \n  \n    2 \n    Rory McIlroy \n    -7 \n    73 \n    73 \n    71 \n    64 \n    281 \n    $1,620,000 \n    330 \n  \n  \n    T3 \n    Shane Lowry \n    -5 \n    73 \n    68 \n    73 \n    69 \n    283 \n    $870,000 \n    180 \n  \n  \n    T3 \n    Cameron Smith \n    -5 \n    68 \n    74 \n    68 \n    73 \n    283 \n    $870,000 \n    180 \n  \n  \n    5 \n    Collin Morikawa \n    -4 \n    73 \n    70 \n    74 \n    67 \n    284 \n    $600,000 \n    120 \n  \n  \n    T6 \n    Corey Conners \n    -3 \n    70 \n    73 \n    72 \n    70 \n    285 \n    $521,250 \n    105 \n  \n  \n    T6 \n    Will Zalatoris \n    -3 \n    71 \n    72 \n    75 \n    67 \n    285 \n    $521,250 \n    105 \n  \n  \n    T8 \n    Sungjae Im \n    -1 \n    67 \n    74 \n    71 \n    75 \n    287 \n    $450,000 \n    91 \n  \n  \n    T8 \n    Justin Thomas \n    -1 \n    76 \n    67 \n    72 \n    72 \n    287 \n    $450,000 \n    91 \n  \n  \n    T10 \n    Charl Schwartzel \n    E \n    72 \n    69 \n    73 \n    74 \n    288 \n    $390,000 \n    80 \n  \n  \n    T10 \n    Cameron Champ \n    E \n    72 \n    75 \n    71 \n    70 \n    288 \n    $390,000 \n    80 \n  \n  \n    T12 \n    Dustin Johnson \n    +1 \n    69 \n    73 \n    75 \n    72 \n    289 \n    $330,000 \n    70 \n  \n  \n    T12 \n    Danny Willett \n    +1 \n    69 \n    74 \n    73 \n    73 \n    289 \n    $330,000 \n    70 \n  \n  \n    T14 \n    Kevin Na \n    +2 \n    71 \n    71 \n    79 \n    69 \n    290 \n    $225,333 \n    55 \n  \n  \n    T14 \n    Jason Kokrak \n    +2 \n    70 \n    76 \n    71 \n    73 \n    290 \n    $225,333 \n    55 \n  \n  \n    T14 \n    Min Woo Lee \n    +2 \n    73 \n    75 \n    72 \n    70 \n    290 \n    $225,333 \n    0 \n  \n  \n    T14 \n    Lee Westwood \n    +2 \n    72 \n    74 \n    73 \n    71 \n    290 \n    $225,333 \n    55 \n  \n  \n    T14 \n    Harry Higgs \n    +2 \n    71 \n    75 \n    73 \n    71 \n    290 \n    $225,333 \n    55 \n  \n  \n    T14 \n    Tommy Fleetwood \n    +2 \n    75 \n    72 \n    70 \n    73 \n    290 \n    $225,333 \n    55 \n  \n  \n    T14 \n    Hideki Matsuyama \n    +2 \n    72 \n    69 \n    77 \n    72 \n    290 \n    $225,333 \n    55 \n  \n  \n    T14 \n    Matt Fitzpatrick \n    +2 \n    71 \n    73 \n    76 \n    70 \n    290 \n    $225,333 \n    55 \n  \n  \n    T14 \n    Talor Gooch \n    +2 \n    72 \n    74 \n    73 \n    71 \n    290 \n    $225,333 \n    55 \n  \n  \n    T23 \n    J.J. Spaun \n    +3 \n    74 \n    70 \n    75 \n    72 \n    291 \n    $138,000 \n    41 \n  \n  \n    T23 \n    Robert MacIntyre \n    +3 \n    73 \n    73 \n    76 \n    69 \n    291 \n    $138,000 \n    0 \n  \n  \n    T23 \n    Sergio Garcia \n    +3 \n    72 \n    74 \n    74 \n    71 \n    291 \n    $138,000 \n    41 \n  \n  \n    T23 \n    Harold Varner III \n    +3 \n    71 \n    71 \n    80 \n    69 \n    291 \n    $138,000 \n    41 \n  \n  \n    T27 \n    Viktor Hovland \n    +4 \n    72 \n    76 \n    71 \n    73 \n    292 \n    $111,000 \n    35 \n  \n  \n    T27 \n    Séamus Power \n    +4 \n    74 \n    74 \n    74 \n    70 \n    292 \n    $111,000 \n    35 \n  \n  \n    T27 \n    Jon Rahm \n    +4 \n    74 \n    72 \n    77 \n    69 \n    292 \n    $111,000 \n    35 \n  \n  \n    T30 \n    Marc Leishman \n    +5 \n    73 \n    75 \n    71 \n    74 \n    293 \n    $93,150 \n    28 \n  \n  \n    T30 \n    Russell Henley \n    +5 \n    73 \n    74 \n    76 \n    70 \n    293 \n    $93,150 \n    28 \n  \n  \n    T30 \n    Hudson Swafford \n    +5 \n    77 \n    69 \n    73 \n    74 \n    293 \n    $93,150 \n    28 \n  \n  \n    T30 \n    Lucas Glover \n    +5 \n    72 \n    76 \n    72 \n    73 \n    293 \n    $93,150 \n    28 \n  \n  \n    T30 \n    Sepp Straka \n    +5 \n    74 \n    72 \n    76 \n    71 \n    293 \n    $93,150 \n    28 \n  \n  \n    T35 \n    Joaquin Niemann \n    +6 \n    69 \n    74 \n    77 \n    74 \n    294 \n    $75,563 \n    22 \n  \n  \n    T35 \n    Webb Simpson \n    +6 \n    71 \n    74 \n    73 \n    76 \n    294 \n    $75,563 \n    22 \n  \n  \n    T35 \n    Tony Finau \n    +6 \n    71 \n    75 \n    74 \n    74 \n    294 \n    $75,563 \n    22 \n  \n  \n    T35 \n    Patrick Reed \n    +6 \n    74 \n    73 \n    73 \n    74 \n    294 \n    $75,563 \n    22 \n  \n  \n    T39 \n    Patrick Cantlay \n    +7 \n    70 \n    75 \n    79 \n    71 \n    295 \n    $63,000 \n    18 \n  \n  \n    T39 \n    Tom Hoge \n    +7 \n    73 \n    74 \n    75 \n    73 \n    295 \n    $63,000 \n    18 \n  \n  \n    T39 \n    Si Woo Kim \n    +7 \n    76 \n    70 \n    73 \n    76 \n    295 \n    $63,000 \n    18 \n  \n  \n    T39 \n    Bubba Watson \n    +7 \n    73 \n    73 \n    78 \n    71 \n    295 \n    $63,000 \n    18 \n  \n  \n    43 \n    Billy Horschel \n    +8 \n    74 \n    73 \n    79 \n    70 \n    296 \n    $55,500 \n    15 \n  \n  \n    T44 \n    Kevin Kisner \n    +9 \n    75 \n    70 \n    75 \n    77 \n    297 \n    $51,000 \n    13 \n  \n  \n    T44 \n    Christiaan Bezuidenhout \n    +9 \n    73 \n    71 \n    77 \n    76 \n    297 \n    $51,000 \n    13 \n  \n  \n    46 \n    Cam Davis \n    +12 \n    75 \n    73 \n    79 \n    73 \n    300 \n    $46,500 \n    12 \n  \n  \n    47 \n    Tiger Woods \n    +13 \n    71 \n    74 \n    78 \n    78 \n    301 \n    $43,500 \n    11 \n  \n  \n    T48 \n    Adam Scott \n    +14 \n    74 \n    74 \n    80 \n    74 \n    302 \n    $40,050 \n    10 \n  \n  \n    T48 \n    Max Homa \n    +14 \n    74 \n    73 \n    77 \n    78 \n    302 \n    $40,050 \n    10 \n  \n  \n    T50 \n    Mackenzie Hughes \n    +15 \n    73 \n    75 \n    77 \n    78 \n    303 \n    $37,350 \n    9 \n  \n  \n    T50 \n    Daniel Berger \n    +15 \n    71 \n    75 \n    77 \n    80 \n    303 \n    $37,350 \n    9 \n  \n  \n    52 \n    Tyrrell Hatton \n    +17 \n    72 \n    74 \n    79 \n    80 \n    305 \n    $36,000 \n    8 \n  \n  \n    - \n    Brian Harman \n    CUT \n    74 \n    75 \n    -- \n    -- \n    149 \n    -- \n    0 \n  \n  \n    - \n    Padraig Harrington \n    CUT \n    74 \n    75 \n    -- \n    -- \n    149 \n    -- \n    0 \n  \n  \n    - \n    Takumi Kanaya \n    CUT \n    75 \n    74 \n    -- \n    -- \n    149 \n    -- \n    0 \n  \n  \n    - \n    Zach Johnson \n    CUT \n    74 \n    75 \n    -- \n    -- \n    149 \n    -- \n    0 \n  \n  \n    - \n    K.H. Lee \n    CUT \n    74 \n    75 \n    -- \n    -- \n    149 \n    -- \n    0 \n  \n  \n    - \n    Sam Burns \n    CUT \n    75 \n    74 \n    -- \n    -- \n    149 \n    -- \n    0 \n  \n  \n    - \n    Lucas Herbert \n    CUT \n    74 \n    76 \n    -- \n    -- \n    150 \n    -- \n    0 \n  \n  \n    - \n    Mike Weir \n    CUT \n    74 \n    76 \n    -- \n    -- \n    150 \n    -- \n    0 \n  \n  \n    - \n    Jordan Spieth \n    CUT \n    74 \n    76 \n    -- \n    -- \n    150 \n    -- \n    0 \n  \n  \n    - \n    Brooks Koepka \n    CUT \n    75 \n    75 \n    -- \n    -- \n    150 \n    -- \n    0 \n  \n  \n    - \n    Ryan Palmer \n    CUT \n    75 \n    75 \n    -- \n    -- \n    150 \n    -- \n    0 \n  \n  \n    - \n    Xander Schauffele \n    CUT \n    74 \n    77 \n    -- \n    -- \n    151 \n    -- \n    0 \n  \n  \n    - \n    Keita Nakajima \n    CUT \n    72 \n    79 \n    -- \n    -- \n    151 \n    -- \n    0 \n  \n  \n    - \n    Austin Greaser (a) \n    CUT \n    74 \n    77 \n    -- \n    -- \n    151 \n    -- \n    0 \n  \n  \n    - \n    Stewart Cink \n    CUT \n    76 \n    75 \n    -- \n    -- \n    151 \n    -- \n    0 \n  \n  \n    - \n    Abraham Ancer \n    CUT \n    72 \n    79 \n    -- \n    -- \n    151 \n    -- \n    0 \n  \n  \n    - \n    Luke List \n    CUT \n    77 \n    75 \n    -- \n    -- \n    152 \n    -- \n    0 \n  \n  \n    - \n    Francesco Molinari \n    CUT \n    78 \n    74 \n    -- \n    -- \n    152 \n    -- \n    0 \n  \n  \n    - \n    Bernhard Langer \n    CUT \n    76 \n    76 \n    -- \n    -- \n    152 \n    -- \n    0 \n  \n  \n    - \n    Gary Woodland \n    CUT \n    75 \n    77 \n    -- \n    -- \n    152 \n    -- \n    0 \n  \n  \n    - \n    Justin Rose \n    CUT \n    76 \n    76 \n    -- \n    -- \n    152 \n    -- \n    0 \n  \n  \n    - \n    Erik van Rooyen \n    CUT \n    73 \n    79 \n    -- \n    -- \n    152 \n    -- \n    0 \n  \n  \n    - \n    Guido Migliozzi \n    CUT \n    75 \n    77 \n    -- \n    -- \n    152 \n    -- \n    0 \n  \n  \n    - \n    Cameron Young \n    CUT \n    77 \n    77 \n    -- \n    -- \n    154 \n    -- \n    0 \n  \n  \n    - \n    Fred Couples \n    CUT \n    75 \n    79 \n    -- \n    -- \n    154 \n    -- \n    0 \n  \n  \n    - \n    Garrick Higgo \n    CUT \n    72 \n    83 \n    -- \n    -- \n    155 \n    -- \n    0 \n  \n  \n    - \n    Larry Mize \n    CUT \n    77 \n    78 \n    -- \n    -- \n    155 \n    -- \n    0 \n  \n  \n    - \n    James Piot \n    CUT \n    81 \n    74 \n    -- \n    -- \n    155 \n    -- \n    0 \n  \n  \n    - \n    Aaron Jarvis (a) \n    CUT \n    81 \n    74 \n    -- \n    -- \n    155 \n    -- \n    0 \n  \n  \n    - \n    Bryson DeChambeau \n    CUT \n    76 \n    80 \n    -- \n    -- \n    156 \n    -- \n    0 \n  \n  \n    - \n    Sandy Lyle \n    CUT \n    82 \n    76 \n    -- \n    -- \n    158 \n    -- \n    0 \n  \n  \n    - \n    Vijay Singh \n    CUT \n    78 \n    80 \n    -- \n    -- \n    158 \n    -- \n    0 \n  \n  \n    - \n    Matthew Wolff \n    CUT \n    81 \n    78 \n    -- \n    -- \n    159 \n    -- \n    0 \n  \n  \n    - \n    Thomas Pieters \n    CUT \n    79 \n    80 \n    -- \n    -- \n    159 \n    -- \n    0 \n  \n  \n    - \n    Stewart Hagestad (a) \n    CUT \n    79 \n    81 \n    -- \n    -- \n    160 \n    -- \n    0 \n  \n  \n    - \n    José María Olazábal \n    CUT \n    77 \n    84 \n    -- \n    -- \n    161 \n    -- \n    0 \n  \n  \n    - \n    Laird Shepherd \n    CUT \n    81 \n    85 \n    -- \n    -- \n    166 \n    -- \n    0 \n  \n  \n    - \n    Louis Oosthuizen \n    WD \n    76 \n    -- \n    -- \n    -- \n    76 \n    -- \n    0 \n  \n  \n    - \n    Paul Casey \n    WD \n    -- \n    -- \n    -- \n    -- \n    -- \n    -- \n    0 \n  \n\n\n\n\n\nThe rules of our pool were to each pick 6 players. We would count the four lowest scores each day, and otherwise assign a score of +8 if you failed to have four players make the cut. The winner is the one with the lowest score for their team at the end of the tournament.\n\nJoin fantasy picks\nWe each fill out our teams by a snake draft often on Zoom. For the 2021 Masters, we filled our our results in a GoogleSheet. We can use the googlesheets4 package to read in data from our GoogleSheet of picks into R.\n\nss = \"https://docs.google.com/spreadsheets/d/14nW_AWYil-jBQ2lC54k_lETGw_O031no-Q3FYvtwsUs/edit#gid=0\"\npicks = read_sheet(ss, sheet = \"draft\")\n\npicks %>%\n  pivot_wider(id_cols = Round, names_from = team, values_from = player) %>%\n  kbl() %>%\n  kable_paper(\"striped\")\n\n\n\n \n  \n    Round \n    Bray \n    Bret \n    Craig \n    Jacko \n    John \n    Jordan \n    Mike \n    Rocco \n    Trev \n  \n \n\n  \n    1 \n    Justin Thomas \n    Rory McIlroy \n    Collin Morikawa \n    Brooks Koepka \n    Scottie Scheffler \n    Cameron Smith \n    Viktor Hovland \n    Jon Rahm \n    Dustin Johnson \n  \n  \n    3 \n    Shane Lowry \n    Corey Conners \n    Paul Casey \n    Daniel Berger \n    Tommy Fleetwood \n    Sam Burns \n    Abraham Ancer \n    Bryson DeChambeau \n    Matt Fitzpatrick \n  \n  \n    2 \n    Louis Oosthuizen \n    Jordan Spieth \n    Hideki Matsuyama \n    Will Zalatoris \n    Tiger Woods \n    Joaquin Niemann \n    Patrick Cantlay \n    Tony Finau \n    Xander Schauffele \n  \n  \n    4 \n    Tyrrell Hatton \n    Sungjae Im \n    Max Homa \n    Kevin Kisner \n    Adam Scott \n    Justin Rose \n    Patrick Reed \n    Billy Horschel \n    Russell Henley \n  \n  \n    5 \n    Bubba Watson \n    Jason Kokrak \n    Kevin Na \n    Cameron Champ \n    Marc Leishman \n    Sergio Garcia \n    Lee Westwood \n    Webb Simpson \n    Talor Gooch \n  \n  \n    6 \n    Seamus Power \n    Tom Hoge \n    Thomas Pieters \n    Mackenzie Hughes \n    Gary Woodland \n    Si Woo Kim \n    Lucas Herbert \n    Francesco Molinari \n    Cameron Young \n  \n\n\n\n\n# join scoreboard data & reshape\nresults = picks %>%\n  select(-Round) %>%\n  left_join(scores %>% select(-c(\"POS\", \"SCORE\", \"TOT\", \"EARNINGS\", \"FEDEX PTS\") ), \n            by = c(\"player\" = \"PLAYER\")) %>%\n  pivot_longer(c(\"R1\", \"R2\", \"R3\", \"R4\"), names_to = \"round\", values_to = \"score\") %>%\n  mutate(score = ifelse(score == \"--\", 80, as.numeric(score))) # set MCs to 80\n\nresults %>%\n  kbl() %>%\n  kable_paper(\"striped\") %>%\n  scroll_box(height = \"500px\")\n\n\n\n \n  \n    team \n    player \n    round \n    score \n  \n \n\n  \n    Bray \n    Justin Thomas \n    R1 \n    76 \n  \n  \n    Bray \n    Justin Thomas \n    R2 \n    67 \n  \n  \n    Bray \n    Justin Thomas \n    R3 \n    72 \n  \n  \n    Bray \n    Justin Thomas \n    R4 \n    72 \n  \n  \n    Bray \n    Shane Lowry \n    R1 \n    73 \n  \n  \n    Bray \n    Shane Lowry \n    R2 \n    68 \n  \n  \n    Bray \n    Shane Lowry \n    R3 \n    73 \n  \n  \n    Bray \n    Shane Lowry \n    R4 \n    69 \n  \n  \n    Bray \n    Louis Oosthuizen \n    R1 \n    76 \n  \n  \n    Bray \n    Louis Oosthuizen \n    R2 \n    80 \n  \n  \n    Bray \n    Louis Oosthuizen \n    R3 \n    80 \n  \n  \n    Bray \n    Louis Oosthuizen \n    R4 \n    80 \n  \n  \n    Bray \n    Tyrrell Hatton \n    R1 \n    72 \n  \n  \n    Bray \n    Tyrrell Hatton \n    R2 \n    74 \n  \n  \n    Bray \n    Tyrrell Hatton \n    R3 \n    79 \n  \n  \n    Bray \n    Tyrrell Hatton \n    R4 \n    80 \n  \n  \n    Bray \n    Bubba Watson \n    R1 \n    73 \n  \n  \n    Bray \n    Bubba Watson \n    R2 \n    73 \n  \n  \n    Bray \n    Bubba Watson \n    R3 \n    78 \n  \n  \n    Bray \n    Bubba Watson \n    R4 \n    71 \n  \n  \n    Bray \n    Seamus Power \n    R1 \n    NA \n  \n  \n    Bray \n    Seamus Power \n    R2 \n    NA \n  \n  \n    Bray \n    Seamus Power \n    R3 \n    NA \n  \n  \n    Bray \n    Seamus Power \n    R4 \n    NA \n  \n  \n    Bret \n    Jordan Spieth \n    R1 \n    74 \n  \n  \n    Bret \n    Jordan Spieth \n    R2 \n    76 \n  \n  \n    Bret \n    Jordan Spieth \n    R3 \n    80 \n  \n  \n    Bret \n    Jordan Spieth \n    R4 \n    80 \n  \n  \n    Bret \n    Rory McIlroy \n    R1 \n    73 \n  \n  \n    Bret \n    Rory McIlroy \n    R2 \n    73 \n  \n  \n    Bret \n    Rory McIlroy \n    R3 \n    71 \n  \n  \n    Bret \n    Rory McIlroy \n    R4 \n    64 \n  \n  \n    Bret \n    Corey Conners \n    R1 \n    70 \n  \n  \n    Bret \n    Corey Conners \n    R2 \n    73 \n  \n  \n    Bret \n    Corey Conners \n    R3 \n    72 \n  \n  \n    Bret \n    Corey Conners \n    R4 \n    70 \n  \n  \n    Bret \n    Sungjae Im \n    R1 \n    67 \n  \n  \n    Bret \n    Sungjae Im \n    R2 \n    74 \n  \n  \n    Bret \n    Sungjae Im \n    R3 \n    71 \n  \n  \n    Bret \n    Sungjae Im \n    R4 \n    75 \n  \n  \n    Bret \n    Tom Hoge \n    R1 \n    73 \n  \n  \n    Bret \n    Tom Hoge \n    R2 \n    74 \n  \n  \n    Bret \n    Tom Hoge \n    R3 \n    75 \n  \n  \n    Bret \n    Tom Hoge \n    R4 \n    73 \n  \n  \n    Bret \n    Jason Kokrak \n    R1 \n    70 \n  \n  \n    Bret \n    Jason Kokrak \n    R2 \n    76 \n  \n  \n    Bret \n    Jason Kokrak \n    R3 \n    71 \n  \n  \n    Bret \n    Jason Kokrak \n    R4 \n    73 \n  \n  \n    Craig \n    Collin Morikawa \n    R1 \n    73 \n  \n  \n    Craig \n    Collin Morikawa \n    R2 \n    70 \n  \n  \n    Craig \n    Collin Morikawa \n    R3 \n    74 \n  \n  \n    Craig \n    Collin Morikawa \n    R4 \n    67 \n  \n  \n    Craig \n    Hideki Matsuyama \n    R1 \n    72 \n  \n  \n    Craig \n    Hideki Matsuyama \n    R2 \n    69 \n  \n  \n    Craig \n    Hideki Matsuyama \n    R3 \n    77 \n  \n  \n    Craig \n    Hideki Matsuyama \n    R4 \n    72 \n  \n  \n    Craig \n    Paul Casey \n    R1 \n    80 \n  \n  \n    Craig \n    Paul Casey \n    R2 \n    80 \n  \n  \n    Craig \n    Paul Casey \n    R3 \n    80 \n  \n  \n    Craig \n    Paul Casey \n    R4 \n    80 \n  \n  \n    Craig \n    Max Homa \n    R1 \n    74 \n  \n  \n    Craig \n    Max Homa \n    R2 \n    73 \n  \n  \n    Craig \n    Max Homa \n    R3 \n    77 \n  \n  \n    Craig \n    Max Homa \n    R4 \n    78 \n  \n  \n    Craig \n    Thomas Pieters \n    R1 \n    79 \n  \n  \n    Craig \n    Thomas Pieters \n    R2 \n    80 \n  \n  \n    Craig \n    Thomas Pieters \n    R3 \n    80 \n  \n  \n    Craig \n    Thomas Pieters \n    R4 \n    80 \n  \n  \n    Craig \n    Kevin Na \n    R1 \n    71 \n  \n  \n    Craig \n    Kevin Na \n    R2 \n    71 \n  \n  \n    Craig \n    Kevin Na \n    R3 \n    79 \n  \n  \n    Craig \n    Kevin Na \n    R4 \n    69 \n  \n  \n    Jacko \n    Brooks Koepka \n    R1 \n    75 \n  \n  \n    Jacko \n    Brooks Koepka \n    R2 \n    75 \n  \n  \n    Jacko \n    Brooks Koepka \n    R3 \n    80 \n  \n  \n    Jacko \n    Brooks Koepka \n    R4 \n    80 \n  \n  \n    Jacko \n    Will Zalatoris \n    R1 \n    71 \n  \n  \n    Jacko \n    Will Zalatoris \n    R2 \n    72 \n  \n  \n    Jacko \n    Will Zalatoris \n    R3 \n    75 \n  \n  \n    Jacko \n    Will Zalatoris \n    R4 \n    67 \n  \n  \n    Jacko \n    Daniel Berger \n    R1 \n    71 \n  \n  \n    Jacko \n    Daniel Berger \n    R2 \n    75 \n  \n  \n    Jacko \n    Daniel Berger \n    R3 \n    77 \n  \n  \n    Jacko \n    Daniel Berger \n    R4 \n    80 \n  \n  \n    Jacko \n    Kevin Kisner \n    R1 \n    75 \n  \n  \n    Jacko \n    Kevin Kisner \n    R2 \n    70 \n  \n  \n    Jacko \n    Kevin Kisner \n    R3 \n    75 \n  \n  \n    Jacko \n    Kevin Kisner \n    R4 \n    77 \n  \n  \n    Jacko \n    Cameron Champ \n    R1 \n    72 \n  \n  \n    Jacko \n    Cameron Champ \n    R2 \n    75 \n  \n  \n    Jacko \n    Cameron Champ \n    R3 \n    71 \n  \n  \n    Jacko \n    Cameron Champ \n    R4 \n    70 \n  \n  \n    Jacko \n    Mackenzie Hughes \n    R1 \n    73 \n  \n  \n    Jacko \n    Mackenzie Hughes \n    R2 \n    75 \n  \n  \n    Jacko \n    Mackenzie Hughes \n    R3 \n    77 \n  \n  \n    Jacko \n    Mackenzie Hughes \n    R4 \n    78 \n  \n  \n    John \n    Scottie Scheffler \n    R1 \n    69 \n  \n  \n    John \n    Scottie Scheffler \n    R2 \n    67 \n  \n  \n    John \n    Scottie Scheffler \n    R3 \n    71 \n  \n  \n    John \n    Scottie Scheffler \n    R4 \n    71 \n  \n  \n    John \n    Tiger Woods \n    R1 \n    71 \n  \n  \n    John \n    Tiger Woods \n    R2 \n    74 \n  \n  \n    John \n    Tiger Woods \n    R3 \n    78 \n  \n  \n    John \n    Tiger Woods \n    R4 \n    78 \n  \n  \n    John \n    Adam Scott \n    R1 \n    74 \n  \n  \n    John \n    Adam Scott \n    R2 \n    74 \n  \n  \n    John \n    Adam Scott \n    R3 \n    80 \n  \n  \n    John \n    Adam Scott \n    R4 \n    74 \n  \n  \n    John \n    Tommy Fleetwood \n    R1 \n    75 \n  \n  \n    John \n    Tommy Fleetwood \n    R2 \n    72 \n  \n  \n    John \n    Tommy Fleetwood \n    R3 \n    70 \n  \n  \n    John \n    Tommy Fleetwood \n    R4 \n    73 \n  \n  \n    John \n    Marc Leishman \n    R1 \n    73 \n  \n  \n    John \n    Marc Leishman \n    R2 \n    75 \n  \n  \n    John \n    Marc Leishman \n    R3 \n    71 \n  \n  \n    John \n    Marc Leishman \n    R4 \n    74 \n  \n  \n    John \n    Gary Woodland \n    R1 \n    75 \n  \n  \n    John \n    Gary Woodland \n    R2 \n    77 \n  \n  \n    John \n    Gary Woodland \n    R3 \n    80 \n  \n  \n    John \n    Gary Woodland \n    R4 \n    80 \n  \n  \n    Jordan \n    Cameron Smith \n    R1 \n    68 \n  \n  \n    Jordan \n    Cameron Smith \n    R2 \n    74 \n  \n  \n    Jordan \n    Cameron Smith \n    R3 \n    68 \n  \n  \n    Jordan \n    Cameron Smith \n    R4 \n    73 \n  \n  \n    Jordan \n    Sam Burns \n    R1 \n    75 \n  \n  \n    Jordan \n    Sam Burns \n    R2 \n    74 \n  \n  \n    Jordan \n    Sam Burns \n    R3 \n    80 \n  \n  \n    Jordan \n    Sam Burns \n    R4 \n    80 \n  \n  \n    Jordan \n    Joaquin Niemann \n    R1 \n    69 \n  \n  \n    Jordan \n    Joaquin Niemann \n    R2 \n    74 \n  \n  \n    Jordan \n    Joaquin Niemann \n    R3 \n    77 \n  \n  \n    Jordan \n    Joaquin Niemann \n    R4 \n    74 \n  \n  \n    Jordan \n    Sergio Garcia \n    R1 \n    72 \n  \n  \n    Jordan \n    Sergio Garcia \n    R2 \n    74 \n  \n  \n    Jordan \n    Sergio Garcia \n    R3 \n    74 \n  \n  \n    Jordan \n    Sergio Garcia \n    R4 \n    71 \n  \n  \n    Jordan \n    Justin Rose \n    R1 \n    76 \n  \n  \n    Jordan \n    Justin Rose \n    R2 \n    76 \n  \n  \n    Jordan \n    Justin Rose \n    R3 \n    80 \n  \n  \n    Jordan \n    Justin Rose \n    R4 \n    80 \n  \n  \n    Jordan \n    Si Woo Kim \n    R1 \n    76 \n  \n  \n    Jordan \n    Si Woo Kim \n    R2 \n    70 \n  \n  \n    Jordan \n    Si Woo Kim \n    R3 \n    73 \n  \n  \n    Jordan \n    Si Woo Kim \n    R4 \n    76 \n  \n  \n    Mike \n    Viktor Hovland \n    R1 \n    72 \n  \n  \n    Mike \n    Viktor Hovland \n    R2 \n    76 \n  \n  \n    Mike \n    Viktor Hovland \n    R3 \n    71 \n  \n  \n    Mike \n    Viktor Hovland \n    R4 \n    73 \n  \n  \n    Mike \n    Patrick Cantlay \n    R1 \n    70 \n  \n  \n    Mike \n    Patrick Cantlay \n    R2 \n    75 \n  \n  \n    Mike \n    Patrick Cantlay \n    R3 \n    79 \n  \n  \n    Mike \n    Patrick Cantlay \n    R4 \n    71 \n  \n  \n    Mike \n    Patrick Reed \n    R1 \n    74 \n  \n  \n    Mike \n    Patrick Reed \n    R2 \n    73 \n  \n  \n    Mike \n    Patrick Reed \n    R3 \n    73 \n  \n  \n    Mike \n    Patrick Reed \n    R4 \n    74 \n  \n  \n    Mike \n    Abraham Ancer \n    R1 \n    72 \n  \n  \n    Mike \n    Abraham Ancer \n    R2 \n    79 \n  \n  \n    Mike \n    Abraham Ancer \n    R3 \n    80 \n  \n  \n    Mike \n    Abraham Ancer \n    R4 \n    80 \n  \n  \n    Mike \n    Lee Westwood \n    R1 \n    72 \n  \n  \n    Mike \n    Lee Westwood \n    R2 \n    74 \n  \n  \n    Mike \n    Lee Westwood \n    R3 \n    73 \n  \n  \n    Mike \n    Lee Westwood \n    R4 \n    71 \n  \n  \n    Mike \n    Lucas Herbert \n    R1 \n    74 \n  \n  \n    Mike \n    Lucas Herbert \n    R2 \n    76 \n  \n  \n    Mike \n    Lucas Herbert \n    R3 \n    80 \n  \n  \n    Mike \n    Lucas Herbert \n    R4 \n    80 \n  \n  \n    Rocco \n    Francesco Molinari \n    R1 \n    78 \n  \n  \n    Rocco \n    Francesco Molinari \n    R2 \n    74 \n  \n  \n    Rocco \n    Francesco Molinari \n    R3 \n    80 \n  \n  \n    Rocco \n    Francesco Molinari \n    R4 \n    80 \n  \n  \n    Rocco \n    Jon Rahm \n    R1 \n    74 \n  \n  \n    Rocco \n    Jon Rahm \n    R2 \n    72 \n  \n  \n    Rocco \n    Jon Rahm \n    R3 \n    77 \n  \n  \n    Rocco \n    Jon Rahm \n    R4 \n    69 \n  \n  \n    Rocco \n    Tony Finau \n    R1 \n    71 \n  \n  \n    Rocco \n    Tony Finau \n    R2 \n    75 \n  \n  \n    Rocco \n    Tony Finau \n    R3 \n    74 \n  \n  \n    Rocco \n    Tony Finau \n    R4 \n    74 \n  \n  \n    Rocco \n    Bryson DeChambeau \n    R1 \n    76 \n  \n  \n    Rocco \n    Bryson DeChambeau \n    R2 \n    80 \n  \n  \n    Rocco \n    Bryson DeChambeau \n    R3 \n    80 \n  \n  \n    Rocco \n    Bryson DeChambeau \n    R4 \n    80 \n  \n  \n    Rocco \n    Billy Horschel \n    R1 \n    74 \n  \n  \n    Rocco \n    Billy Horschel \n    R2 \n    73 \n  \n  \n    Rocco \n    Billy Horschel \n    R3 \n    79 \n  \n  \n    Rocco \n    Billy Horschel \n    R4 \n    70 \n  \n  \n    Rocco \n    Webb Simpson \n    R1 \n    71 \n  \n  \n    Rocco \n    Webb Simpson \n    R2 \n    74 \n  \n  \n    Rocco \n    Webb Simpson \n    R3 \n    73 \n  \n  \n    Rocco \n    Webb Simpson \n    R4 \n    76 \n  \n  \n    Trev \n    Dustin Johnson \n    R1 \n    69 \n  \n  \n    Trev \n    Dustin Johnson \n    R2 \n    73 \n  \n  \n    Trev \n    Dustin Johnson \n    R3 \n    75 \n  \n  \n    Trev \n    Dustin Johnson \n    R4 \n    72 \n  \n  \n    Trev \n    Xander Schauffele \n    R1 \n    74 \n  \n  \n    Trev \n    Xander Schauffele \n    R2 \n    77 \n  \n  \n    Trev \n    Xander Schauffele \n    R3 \n    80 \n  \n  \n    Trev \n    Xander Schauffele \n    R4 \n    80 \n  \n  \n    Trev \n    Matt Fitzpatrick \n    R1 \n    71 \n  \n  \n    Trev \n    Matt Fitzpatrick \n    R2 \n    73 \n  \n  \n    Trev \n    Matt Fitzpatrick \n    R3 \n    76 \n  \n  \n    Trev \n    Matt Fitzpatrick \n    R4 \n    70 \n  \n  \n    Trev \n    Russell Henley \n    R1 \n    73 \n  \n  \n    Trev \n    Russell Henley \n    R2 \n    74 \n  \n  \n    Trev \n    Russell Henley \n    R3 \n    76 \n  \n  \n    Trev \n    Russell Henley \n    R4 \n    70 \n  \n  \n    Trev \n    Talor Gooch \n    R1 \n    72 \n  \n  \n    Trev \n    Talor Gooch \n    R2 \n    74 \n  \n  \n    Trev \n    Talor Gooch \n    R3 \n    73 \n  \n  \n    Trev \n    Talor Gooch \n    R4 \n    71 \n  \n  \n    Trev \n    Cameron Young \n    R1 \n    77 \n  \n  \n    Trev \n    Cameron Young \n    R2 \n    77 \n  \n  \n    Trev \n    Cameron Young \n    R3 \n    80 \n  \n  \n    Trev \n    Cameron Young \n    R4 \n    80"
  },
  {
    "objectID": "blog/2022-06-12-masters-fantasy-golf-tournament-dashboard/index.html#prepare-data-compute-sidebets",
    "href": "blog/2022-06-12-masters-fantasy-golf-tournament-dashboard/index.html#prepare-data-compute-sidebets",
    "title": "Masters Fantasy Golf Tournament Dashboard",
    "section": "Prepare Data & Compute Sidebets",
    "text": "Prepare Data & Compute Sidebets\nNow we have the scores read in, lets compute the day-by-day scores for each team. Recall, this is the four lowest scores per team per round.\n\npool_results = results %>%\n  group_by(team, round) %>%\n  arrange(team, round, score) %>%\n  mutate(count_score = ifelse(rank(score, ties.method = \"first\") <= 4, 1, 0)) %>%\n  summarise(value = sum(score * count_score) - 72 * 4) %>%\n  ungroup()\n\ntotal_scores = pool_results %>% \n  pivot_wider(id_cols = team, names_from = round, values_from = value) %>%\n  group_by(team) %>%\n  mutate(Total = sum(across())) %>%\n  arrange(Total)\n\ntotal_scores %>%\n  kbl() %>%\n  kable_paper(\"striped\")\n\n\n\n \n  \n    team \n    R1 \n    R2 \n    R3 \n    R4 \n    Total \n  \n \n\n  \n    Bret \n    -8 \n    6 \n    -3 \n    -8 \n    -13 \n  \n  \n    John \n    -1 \n    -1 \n    2 \n    4 \n    4 \n  \n  \n    Jordan \n    -4 \n    4 \n    4 \n    6 \n    10 \n  \n  \n    Trev \n    -3 \n    6 \n    12 \n    -5 \n    10 \n  \n  \n    Craig \n    2 \n    -5 \n    19 \n    -2 \n    14 \n  \n  \n    Jacko \n    -1 \n    4 \n    10 \n    4 \n    17 \n  \n  \n    Mike \n    -2 \n    10 \n    8 \n    1 \n    17 \n  \n  \n    Rocco \n    2 \n    5 \n    15 \n    1 \n    23 \n  \n  \n    Bray \n    NA \n    NA \n    NA \n    NA \n    NA \n  \n\n\n\n\nplayer_scores = results %>%\n  pivot_wider(id_cols = c(\"player\", \"team\"), names_from = round, values_from = score)\n\nplayer_scores %>%\n  select(-team) %>%\n  kbl(col.names = c(\"Team\", \"Round 1\", \"Round 2\", \"Round 3\", \"Round 4\")) %>%\n  pack_rows(index = table(player_scores$team)) %>%\n  kable_paper() %>%\n  scroll_box(height = \"500px\")\n\n\n\n \n  \n    Team \n    Round 1 \n    Round 2 \n    Round 3 \n    Round 4 \n  \n \n\n  Bray\n\n    Justin Thomas \n    76 \n    67 \n    72 \n    72 \n  \n  \n    Shane Lowry \n    73 \n    68 \n    73 \n    69 \n  \n  \n    Louis Oosthuizen \n    76 \n    80 \n    80 \n    80 \n  \n  \n    Tyrrell Hatton \n    72 \n    74 \n    79 \n    80 \n  \n  \n    Bubba Watson \n    73 \n    73 \n    78 \n    71 \n  \n  \n    Seamus Power \n    NA \n    NA \n    NA \n    NA \n  \n  Bret\n\n    Jordan Spieth \n    74 \n    76 \n    80 \n    80 \n  \n  \n    Rory McIlroy \n    73 \n    73 \n    71 \n    64 \n  \n  \n    Corey Conners \n    70 \n    73 \n    72 \n    70 \n  \n  \n    Sungjae Im \n    67 \n    74 \n    71 \n    75 \n  \n  \n    Tom Hoge \n    73 \n    74 \n    75 \n    73 \n  \n  \n    Jason Kokrak \n    70 \n    76 \n    71 \n    73 \n  \n  Craig\n\n    Collin Morikawa \n    73 \n    70 \n    74 \n    67 \n  \n  \n    Hideki Matsuyama \n    72 \n    69 \n    77 \n    72 \n  \n  \n    Paul Casey \n    80 \n    80 \n    80 \n    80 \n  \n  \n    Max Homa \n    74 \n    73 \n    77 \n    78 \n  \n  \n    Thomas Pieters \n    79 \n    80 \n    80 \n    80 \n  \n  \n    Kevin Na \n    71 \n    71 \n    79 \n    69 \n  \n  Jacko\n\n    Brooks Koepka \n    75 \n    75 \n    80 \n    80 \n  \n  \n    Will Zalatoris \n    71 \n    72 \n    75 \n    67 \n  \n  \n    Daniel Berger \n    71 \n    75 \n    77 \n    80 \n  \n  \n    Kevin Kisner \n    75 \n    70 \n    75 \n    77 \n  \n  \n    Cameron Champ \n    72 \n    75 \n    71 \n    70 \n  \n  \n    Mackenzie Hughes \n    73 \n    75 \n    77 \n    78 \n  \n  John\n\n    Scottie Scheffler \n    69 \n    67 \n    71 \n    71 \n  \n  \n    Tiger Woods \n    71 \n    74 \n    78 \n    78 \n  \n  \n    Adam Scott \n    74 \n    74 \n    80 \n    74 \n  \n  \n    Tommy Fleetwood \n    75 \n    72 \n    70 \n    73 \n  \n  \n    Marc Leishman \n    73 \n    75 \n    71 \n    74 \n  \n  \n    Gary Woodland \n    75 \n    77 \n    80 \n    80 \n  \n  Jordan\n\n    Cameron Smith \n    68 \n    74 \n    68 \n    73 \n  \n  \n    Sam Burns \n    75 \n    74 \n    80 \n    80 \n  \n  \n    Joaquin Niemann \n    69 \n    74 \n    77 \n    74 \n  \n  \n    Sergio Garcia \n    72 \n    74 \n    74 \n    71 \n  \n  \n    Justin Rose \n    76 \n    76 \n    80 \n    80 \n  \n  \n    Si Woo Kim \n    76 \n    70 \n    73 \n    76 \n  \n  Mike\n\n    Viktor Hovland \n    72 \n    76 \n    71 \n    73 \n  \n  \n    Patrick Cantlay \n    70 \n    75 \n    79 \n    71 \n  \n  \n    Patrick Reed \n    74 \n    73 \n    73 \n    74 \n  \n  \n    Abraham Ancer \n    72 \n    79 \n    80 \n    80 \n  \n  \n    Lee Westwood \n    72 \n    74 \n    73 \n    71 \n  \n  \n    Lucas Herbert \n    74 \n    76 \n    80 \n    80 \n  \n  Rocco\n\n    Francesco Molinari \n    78 \n    74 \n    80 \n    80 \n  \n  \n    Jon Rahm \n    74 \n    72 \n    77 \n    69 \n  \n  \n    Tony Finau \n    71 \n    75 \n    74 \n    74 \n  \n  \n    Bryson DeChambeau \n    76 \n    80 \n    80 \n    80 \n  \n  \n    Billy Horschel \n    74 \n    73 \n    79 \n    70 \n  \n  \n    Webb Simpson \n    71 \n    74 \n    73 \n    76 \n  \n  Trev\n\n    Dustin Johnson \n    69 \n    73 \n    75 \n    72 \n  \n  \n    Xander Schauffele \n    74 \n    77 \n    80 \n    80 \n  \n  \n    Matt Fitzpatrick \n    71 \n    73 \n    76 \n    70 \n  \n  \n    Russell Henley \n    73 \n    74 \n    76 \n    70 \n  \n  \n    Talor Gooch \n    72 \n    74 \n    73 \n    71 \n  \n  \n    Cameron Young \n    77 \n    77 \n    80 \n    80"
  },
  {
    "objectID": "blog/2022-06-12-masters-fantasy-golf-tournament-dashboard/index.html#write-to-googlesheets",
    "href": "blog/2022-06-12-masters-fantasy-golf-tournament-dashboard/index.html#write-to-googlesheets",
    "title": "Masters Fantasy Golf Tournament Dashboard",
    "section": "Write to GoogleSheets",
    "text": "Write to GoogleSheets\nLets write our total table to a GoogleSheet where everyone in the competition can view. The googlesheet can be viewed here.\n\n# add data to sheet\nplayer_scores %>%\n  select(team, player, R1, R2, R3, R4) %>%\n  write_sheet(ss, sheet = \"leaderboard\")\n\n# add a total leader board table\nss %>%\n  range_write(total_scores, sheet = \"leaderboard\", range = \"H1\")\n\n# add date last updated \nss %>%\n  range_write(data = data.frame(Last_updated = as.character(Sys.time())),\n              sheet = \"leaderboard\",\n              range = \"O2\")\n\nFrom here, we can build plots off of the data ranges in our GoogleSheet, and update the formatting however we would like."
  },
  {
    "objectID": "blog/2022-06-12-masters-fantasy-golf-tournament-dashboard/index.html#automate-with-cronr",
    "href": "blog/2022-06-12-masters-fantasy-golf-tournament-dashboard/index.html#automate-with-cronr",
    "title": "Masters Fantasy Golf Tournament Dashboard",
    "section": "Automate with cronR",
    "text": "Automate with cronR\ncronR is a unix/linux tool that allows us to schedule R scripts. We are able to set jobs that will run on specific intervals. For example, we can have our leader board update every 15 minutes during the tournament to provide live updates.\n\nSetting the cron job\nWe use cron_add() to set the cron job. I found when using MacOS that I had to allow cron permissions in system preferences. I found this tutorial to be helpful.\nOnce you install the package, you can also use the RStudio addin, found at Addins > Schedule R scripts on Linux/Unix.\n\nwd = getwd()\nscript = file.path(wd, \"index.rmd\")\ncmd = cron_rscript(script, \n                   log_append = TRUE, \n                   log_timestamp = TRUE)\ncron_add(command = cmd, \n         frequency = \"*/15 * * * *\", \n         id = \"2021-masters-pool\", \n         description = \"update masters pool every 15 mintues\")\n\n\n\nViewing and Removing cron jobs\nThis is as simple as using cron_ls() to list the cron jobs, and cron_rm() to remove jobs by their id.\n\ncron_ls()\n\ncron_rm(\"2021-masters-pool\")"
  },
  {
    "objectID": "blog/2022-06-12-masters-fantasy-golf-tournament-dashboard/index.html#other-comments",
    "href": "blog/2022-06-12-masters-fantasy-golf-tournament-dashboard/index.html#other-comments",
    "title": "Masters Fantasy Golf Tournament Dashboard",
    "section": "Other Comments",
    "text": "Other Comments\nWhile we web scraped the leader board data, I find the API can allow you to get richer data. Specifically hole-by-hole scores. This data allows for other side bets. Specifically having skins or a horse race. The downside is the API changes based on the status of the current event, therefore often requires daily checking.\nAdditionally, you can pull the individual scorecard data from the ESPN player pages. For example, see Rory McIlroy here.\nGoogleSheets also have a read_html() function, which allow you to read the raw data straight into the GoogleSheet. This can remove needing to use R, however you lose the flexibility of being able to update the sheet at whatever period you wish, and you are limited if you wish to do more complex analysis."
  },
  {
    "objectID": "blog/2023-08-01-strava-api-viz/index.html",
    "href": "blog/2023-08-01-strava-api-viz/index.html",
    "title": "Visualizing Strava Activities",
    "section": "",
    "text": "I’ve wanted to write a blog post making some data visualization using the Strava API for some time however was never able to come up with a cool idea that was not already common among others blogs.\nFor example, there is the Marcus Volz Strava package which allows you to make some cool visualizations using your Strava data.\nRather than repeat the same usual Strava plots, I’ve focused on mapping some of the hikes I recently went on during a hiking trip in the Rocky Mountains.\nThe goal is to overlay the GPX Strava data with topographic maps of the area to make a set of posters I can print out to commemorate the trip."
  },
  {
    "objectID": "blog/2023-08-01-strava-api-viz/index.html#collecting-the-data-from-strava",
    "href": "blog/2023-08-01-strava-api-viz/index.html#collecting-the-data-from-strava",
    "title": "Visualizing Strava Activities",
    "section": "Collecting the data from Strava",
    "text": "Collecting the data from Strava\nI use the rStrava package to read in the activity data. This package makes the process very straight forward.\nLet’s download the hiking data using rStrava. It is pretty straight forward to link authenticate your account, the process is covered at the rStrava Github in detail.\n\n\n\n\n\nCode\n# packages used\npacman::p_load(rStrava, dplyr, sf, purrr, tmap, raster)\n\n# strava authentication\napp_name = \"XXXXXXXXXX\"\napp_client_id = \"XXXXXXXXXX\"\napp_secret = \"XXXXXXXXXX\"\n\nstoken = httr::config(\n  token = strava_oauth(\n    app_name = app_name,\n    app_client_id = app_client_id,\n    app_secret = app_secret,\n    app_scope = \"activity:read_all\",\n    cache = TRUE\n  )\n)\n\nactivities = stoken |>\n  get_activity_list() |>\n  compile_activities() |>\n  filter(\n    start_date_local >= as.Date(\"2023/07/15\"),\n    start_date_local <= as.Date(\"2023/07/23\")\n  )\n\n\nWith the data, lets make a quick plot of one of the activities. I came across a useful approach to convert the rStrava activity polyline to a simple feature object in this blog by r.iresmi.net.\n\n\nCode\ngp2sf = function(gp) {\n  gp |>\n    googlePolylines::decode() |>\n    map_dfr(function(df) {\n      df |>\n        st_as_sf(coords = c(\"lon\", \"lat\")) |>\n        st_combine() |>\n        st_cast(\"LINESTRING\") |>\n        st_sf()\n    }) |>\n    pull(1)\n}\n\n# plot hike\nhike = activities |>\n  filter(name == \"Edith Cavell Peak\")\n\ngpx = hike |>\n  mutate(geom = gp2sf(map.summary_polyline)) |>\n  st_sf(crs = \"EPSG:4326\")\n\nmap = tm_shape(gpx) +\n  tm_lines()\n\nmap\n\n\n\n\n\nI am plotting the data as a thematic map using the tmap package. I’ve enjoyed using this package as it has many built in features for customizing maps and follows a similar syntax to ggplot.\n\n\nCode\nmap1 = map +\n  tm_style(\"classic\") +\n  tm_layout(title = \"Edith Cavell Peak\", title.position = c(\"center\", \"top\"))\n\n\nmap2 = map +\n  tm_style(\"cobalt\") +\n  tm_layout(\n    main.title = \"Edith Cavell Peak\",\n    main.title.position = c(\"left\")\n  ) +\n  tm_compass(type = \"8star\", position = \"left\", size = 1)\n\nmap3 = map +\n  tm_style(\"bw\") +\n  tm_layout(frame = FALSE) +\n  tm_compass(type = \"arrow\", position = \"left\", size = 1)\n\ntext = sprintf(\"%s\\nHiked on %s\", gpx$name, format(as.Date(gpx$start_date), \"%B %e, %Y\"))\n\nmap4 = map +\n  tm_style(\"albatross\") +\n  tm_credits(text = text, position = c(\"LEFT\", \"BOTTOM\")) +\n  tm_compass(type = \"rose\", position = c(\"right\", \"top\"), size = 2)\n\ntmap_arrange(map1, map2, map3, map4, nrow = 2)"
  },
  {
    "objectID": "blog/2023-08-01-strava-api-viz/index.html#adding-in-the-topographic-lines",
    "href": "blog/2023-08-01-strava-api-viz/index.html#adding-in-the-topographic-lines",
    "title": "Visualizing Strava Activities",
    "section": "Adding in the topographic lines",
    "text": "Adding in the topographic lines\nNow that we have the GPX data in our plot, we need to add the contour lines. This is the trickier portion of the project, and is my motivation for writing these steps into a blog post as it wasn’t obvious first where to get the topographic data from, and then how to overlay the information with the Strava GPX data.\nThe raster package does all of the heavy lifting here. From raster I collect the elevation data using getData(\"SRTM\", lon, lat) which returns\n90m raster data based on the latitude-longitude coordinates provided.\n\n\nCode\nelevation_data = getData(\"SRTM\", lon = gpx$end_latlng2, lat = gpx$end_latlng1)\n\ntm_shape(elevation_data) +\n  tm_raster() +\n  tm_style(\"albatross\") +\n  tm_layout(\n    legend.bg.color = \"white\",\n    legend.text.color = \"black\",\n    legend.title.color = \"black\",\n    legend.position = c(\"right\", \"top\")\n  )\n\n\n\n\n\nNotice the raster data returned covers a lot of land. We will need to crop this down so that we can see the GPX hike data once we add it to the plot. I’m able to crop the raster using the bounding box of the GPX data.\n\n\nCode\nbbox = st_bbox(gpx)\n\nlat = (bbox$ymax + bbox$ymin) / 2\nlng = (bbox$xmax + bbox$xmin) / 2\ndelta = 0.0275\n\nzoomed_data = raster::crop(\n  elevation_data, extent(\n    lng - delta,\n    lng + delta,\n    lat - delta,\n    lat + delta\n  )\n)\n\ntm_shape(zoomed_data) +\n  tm_raster() +\n  tm_style(\"albatross\") +\n  tm_layout(\n    legend.bg.color = \"white\",\n    legend.text.color = \"black\",\n    legend.title.color = \"black\",\n    legend.position = c(\"right\", \"top\")\n  )\n\n\n\n\n\nMoving from the raster data to contour lines is simple with the raster::rasterToCountor() function. The tm_iso function will plot the contour lines and will include the elevation labels.\n\n\nCode\ncontour_lines = rasterToContour(zoomed_data)\n\ntm_shape(contour_lines) +\n  tm_iso()\n\n\n\n\n\nAdding the GPX data to the contour lines is as simple as adding in an additional feature to the plot.\n\n\nCode\ntm_shape(contour_lines) +\n  tm_iso() +\n  tm_shape(gpx) +\n  tm_lines(col = \"grey20\", lwd = 3) +\n  tm_style(\"bw\") +\n  tm_layout(frame.double.line = TRUE)\n\n\n\n\n\nFinally, we can finish this off by adding in some formatting and labeling based on the metadata collected from Strava. Here are some theme options to show off the plot.\n\n\nCode\ninfo_card = sprintf(\n  \"%s\\n%s\\nDistance: %s km\\nElevation: %s m\",\n  format(as.Date(gpx$start_date), \"%B %e, %Y\"),\n  \"Jasper, Alberta\",\n  round(gpx$distance, 2),\n  round(gpx$elev_high - gpx$elev_low, 2)\n)\n\n\ndark = tm_shape(contour_lines) +\n  tm_iso(along.lines = FALSE, size = 0.5, bg.col = \"#3c444d\", col = \"#535f6b\") +\n  tm_shape(gpx) +\n  tm_lines(col = \"#965251\", lwd = 3) +\n  tm_style(\"cobalt\") +\n  tm_credits(\n    text = info_card,\n    bg.color = \"#3c444d\",\n    position = c(\"LEFT\", \"TOP\")\n  ) +\n  tm_layout(\n    frame = TRUE,\n    frame.double.line = TRUE,\n    bg.color = \"#3c444d\",\n    main.title = gpx$name,\n    main.title.position = c(\"center\", \"TOP\"),\n    main.title.color = \"#3c444d\"\n  )\n\nlight = tm_shape(contour_lines) +\n  tm_iso(along.lines = FALSE) +\n  tm_shape(gpx) +\n  tm_lines(lwd = 2) +\n  tm_style(\"classic\") +\n  tm_layout(frame = TRUE, frame.double.line = FALSE) +\n  tm_credits(text = gpx$name, position = c(\"center\", \"TOP\"), width = 1, align = \"center\", bg.color = \"white\", size = 1)\n\ntmap_arrange(dark, light, nrow = 1)\n\n\n\n\n\nCode\n# design 3: landscape fitting hike better\nelevation_data = getData(\"SRTM\", lon = gpx$end_latlng2, lat = gpx$end_latlng1)\nbbox = st_bbox(gpx)\n\nlat = (bbox$ymax + bbox$ymin) / 2\nlng = (bbox$xmax + bbox$xmin) / 2\ndelta = 0.002\n\nzoomed_data = raster::crop(\n  elevation_data, extent(\n    bbox$xmin - delta,\n    bbox$xmax + delta,\n    bbox$ymin - delta,\n    bbox$ymax + delta\n  )\n)\n\ncontour_lines = rasterToContour(zoomed_data)\n\nlandscape = tm_shape(contour_lines) +\n  tm_iso(along.lines = FALSE) +\n  tm_shape(gpx) +\n  tm_lines(col = \"grey20\", lwd = 3) +\n  tm_style(\"classic\")\n\ntmap_save(tm = landscape, filename = \"thumb.png\", width = 4)\nlandscape"
  },
  {
    "objectID": "blog/2023-08-01-strava-api-viz/index.html#arranging-multiple-maps",
    "href": "blog/2023-08-01-strava-api-viz/index.html#arranging-multiple-maps",
    "title": "Visualizing Strava Activities",
    "section": "Arranging multiple maps",
    "text": "Arranging multiple maps\nWe can repeat the process for a list of activities. Then by collecting the maps into a list we can use tmap_arrange() to plot the maps side by side allowing for detailed contours across multiple activity plots.\n\n\nCode\n# Drop Wapta Falls as is more of a walk than a hike\nactivities = activities |>\n  filter(name != \"Wapta Falls\")\n\n# get max bbox across all activities to offset each plot consistently from the center\nbbox_list = lapply(split(activities, activities$name), FUN = function(x) {\n  line_data = x |>\n    mutate(geom = gp2sf(map.summary_polyline)) |>\n    st_sf(crs = \"EPSG:4326\")\n\n  st_bbox(line_data)\n}) |>\n  bind_rows() |>\n  summarise(\n    dx = max(xmax - xmin),\n    dy = max(ymax - ymin)\n  )\n\ndelta_x = bbox_list$dx / 2\ndelta_y = bbox_list$dy / 1.5 # make more vertical\n\nmap_list = lapply(split(activities, activities$name), FUN = function(x) {\n  if (x$name %in% c(\"Wilcox Viewpoint\", \"Edith Cavell Peak\")) {\n    city = \"Jasper, AB\"\n  } else {\n    city = \"Yoho, BC\"\n  }\n\n  # generate hike path\n  line_data = x |>\n    mutate(geom = gp2sf(map.summary_polyline)) |>\n    st_sf(crs = \"EPSG:4326\")\n\n  # get topographic data & set boundary for plot\n  bbox = st_bbox(line_data)\n  lat = (bbox$ymax + bbox$ymin) / 2\n  lng = (bbox$xmax + bbox$xmin) / 2\n  padding = 0.001\n\n  elevation_data = getData(\"SRTM\", lon = lng, lat = lat)\n  zoomed_data = raster::crop(\n    elevation_data, extent(\n      lng - delta_x - padding,\n      lng + delta_x + padding,\n      lat - delta_y - padding - 0.001, # for text in bottom\n      lat + delta_y + padding\n    )\n  )\n  contour_lines = rasterToContour(zoomed_data)\n\n  # make plot\n  out = tm_shape(contour_lines) +\n    tm_iso(along.lines = FALSE) +\n    tm_shape(line_data) +\n    tm_lines(col = \"grey20\", lwd = 2) +\n    tm_style(\"classic\") +\n    tm_layout(frame.double.line = TRUE, main.title = x$name, \n              main.title.size = 1, outer.bg.color = \"grey50\", main.title.color = \"white\",\n              main.title.position = \"center\") \n\n  out\n})\n\nwidth = 7\nheight = width * delta_x / delta_y\n\ntmap_arrange(map_list, nrow = 1)"
  },
  {
    "objectID": "blog/2022-09-07-nfl-losers-pool-2022/index.html",
    "href": "blog/2022-09-07-nfl-losers-pool-2022/index.html",
    "title": "NFL Losers Pool - 2022",
    "section": "",
    "text": "Coming out of of Labour Day weekend only means one thing, it is time again for the annual NFL Losers Pool competition. This is the second time I am writing about this type of competition. You can see my blog post about trying to draft an optimal lineup here: 2021 NFL Losers Pool.\nBelow are the rules for our 2022 contest."
  },
  {
    "objectID": "blog/2022-09-07-nfl-losers-pool-2022/index.html#losers-pool-rules",
    "href": "blog/2022-09-07-nfl-losers-pool-2022/index.html#losers-pool-rules",
    "title": "NFL Losers Pool - 2022",
    "section": "Losers Pool Rules",
    "text": "Losers Pool Rules\n\nYou must pick exactly one team per week to lose their game.\nYou cannot pick the same team more than once per season.\nIf your team wins their game, you are eliminated.\nRebuys back into the competition are allowed for Weeks 1 and 2.\nYou may enter up to three sets of picks."
  },
  {
    "objectID": "blog/2022-09-07-nfl-losers-pool-2022/index.html#pick-optimization",
    "href": "blog/2022-09-07-nfl-losers-pool-2022/index.html#pick-optimization",
    "title": "NFL Losers Pool - 2022",
    "section": "Pick Optimization",
    "text": "Pick Optimization\nThe objective of this competition is to outlast the other competitors in the pool. Specifically, this means avoiding elimination and being the remaining player in the pool. The second point is worth noting because we will shift our strategy from simply minimizing the risk of our picks losing, to maximizing the likelihood that our picks move on relative to the picks of others in the pool. A quick foreshadowing - this will involve using team ownership to trade-off probability of making it to the next week for increasing our expected value in the competition.\nThere are a total of 32 teams to choose from, and we can expect the pool to run for roughly 10 weeks - going off of last years competition. This is a large number of potential combinations of teams to select in each week. In fact for 10 weeks, it is \\(32 \\times 31 \\times ... \\times 22\\) which is roughly 234 trillion combinations (I’m not including teams with bye weeks but you get the idea, the space of possible picks is very large).\nFortunately, we can be smart about our optimization, and conditional on game forecasts, reach the global optimum without much computation work. I use two different algorithms to compare pick schedules; what I call the Opportunity Cost Model and Greedy Model. The Greedy Model will out preform the Opportunity Cost model in the short run, but eventually the Opportunity Cost model will pass the Greedy Model in future weeks.\n\nOpportunity Cost Model - picking the lowest win probability team in a given week conditional on it having the largest distance to the second lowest win probability that same week.\nGreedy Model - Picking the team with the lowest win probability in the first week, then the second, and so on…\n\nOpportunity Cost Model Algorithm\n\nStep 1: Compute the difference between the least and second least likely teams to win in each week for each team and week in the pool.\nStep 2: Pick the team & week combination with the largest difference between the least and second least likely teams.\nStep 3: Remove the week and team combination from the pool and repeat Steps 1 & 2 until all weeks are filled.\n\n  \nGreedy Model Algorithm\n\nStep 1: Start at the earliest week we wish to optimize over.\nStep 2: Pick the team with the lowest probability of winning, and remove this team from the candidate pool.\nStep 3: Move on to the next week, and repeat Steps 2 and 3 until we reach the terminal week."
  },
  {
    "objectID": "blog/2022-09-07-nfl-losers-pool-2022/index.html#making-picks",
    "href": "blog/2022-09-07-nfl-losers-pool-2022/index.html#making-picks",
    "title": "NFL Losers Pool - 2022",
    "section": "Making Picks",
    "text": "Making Picks\nLets put the above algorithms to action. Like last year, I am using the FiveThirtyEight NFL Projections to estimate each teams likelihood of winning their game. These ratings are based off of each teams computed ELO score, with some additional adjustments - read about their methodology here.\nWe can see that there are some clear weeks below with drastic underdogs, and each week after Week 1 contains at least one game with a win probability less than 25%.\n\n\n\n\n\n\n\n\n\nI choose to run the above two algorithms starting in Week 3. Since we can rebuy back into the competition in Weeks 1 and 2, we do not want to take a valuable pick from our elimination weeks. Therefore, I make my set of picks on weeks 3 through 10, then pick Week 1 and 2 after removing the Weeks 3 - 10 picks, this ended up being the Pittsburgh Steelers and Chicago Bears.\nThe pick schedules using both algorithms are shown below. Notice the trade off of early week win probabilities for later risk savings.\n\n\n\n\n\n\n\n\n\nWe can compare the performance of both algorithms by comparing the likelihoods of reaching a given week for both models. The likelihood we move on from a given week \\(w\\) is equal to the probability \\(P(W\\leq w)\\) where,\n\\[\\begin{align*}\nP(W\\leq w) &= \\Pi_{w=3}^{12} p_{i, w}\\cdot x_{i, w} \\\\\n\\text{Subject to } & \\sum_i x_{i, w} = 1 \\\\\n& \\sum_w x_{i, w} \\leq 1\n\\end{align*}\\]\nWhich is the likelihood a given schedule of picks reaches week 10 subject to being able to pick only one team per week, and picking any given team at most once."
  },
  {
    "objectID": "blog/2022-09-07-nfl-losers-pool-2022/index.html#optimal-decisions-under-multiple-entries",
    "href": "blog/2022-09-07-nfl-losers-pool-2022/index.html#optimal-decisions-under-multiple-entries",
    "title": "NFL Losers Pool - 2022",
    "section": "Optimal Decisions under Multiple Entries",
    "text": "Optimal Decisions under Multiple Entries\nOne interesting aspect of the Losers Pool is that we are able to submit multiple submissions into the competition. The above analysis works for the Single-Entry case, however things become more complex in the Multiple-Entry case. When dealing with multiple entries, I move from minimizing the cost of being eliminated in any given week, to minimizing the likelihood all of the entries are eliminated in a given week. We can represent each combination of an N-team tuple as a possible pick in a given week, and calculate the probability of at least one team moving onto the next week from a tuple of N picks. Given we have two entries in the competition, this is equal to \\(1 - (p_{i, w} \\cdot x_{i, w})(p_{j, w} \\cdot x_{j, w})\\).\nBy computing the above likelihoods of each tuple moving onto the following week, we can then run the Opportunity Cost model on the set of picks, taking the pick with the largest difference between the best and second best pick across all weeks we are considering.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe above plot has its axis removed, however is interactive. By hovering each cell you can see the pick tuple as well as the likelihood one of the two teams moves on. The darker the cell, the greater the likelihood of at least one team losing their game that week.\nSome observations:\n\nIt is almost always best to diversify your picks. Despite Atlanta having a low win rate in Week 5, combinations of picking Atlanta and another team still dominate picking Atlanta.\nThe matrix is symmetric, however ordering of picks matters as picking a team in the first spot can still allow for the same team to be picked in the second spot. i.e. (DET, JAX) and (JAX, DET) are valid in consecutive weeks.\n\nAs above, we can compare the performance of the OC model with the Greedy Model in the Multi-Entry case. The below plot is in terms of the likelihood of moving onto the following week, and so a higher is better. As with the Single-Entry case, we can see the OC model trading off some early likelihood for greater future likelihoods of having at least one team move onto the next week."
  },
  {
    "objectID": "blog/2022-09-07-nfl-losers-pool-2022/index.html#results",
    "href": "blog/2022-09-07-nfl-losers-pool-2022/index.html#results",
    "title": "NFL Losers Pool - 2022",
    "section": "Results",
    "text": "Results\nBelow are picks per entry, where picks which won their game are shown with red text. Once a player is removed, they no longer show up on the plot, and players are sorted in ascending order in terms of their average win probability - players higher in the plot have had lower win probabilities up to the shown week.\n\n\n\n\n\n\n\n\n\nI followed the Opportunity Cost model recommendations for most of my picks. I swapped out the recommended New England in Week 4 for the New York Jets as none of the remaining players in the pool had yet to choose NE, and it is beneficial to separate yourself from the group given how often we see upsets. Unfortunately for me, it was the NYJ and not NE game that resulted in an upset.\nAnd just like that, that is a wrap for the 2022 Losers Pool! Big congrats to Drew2, Billy and DM who chose to split the pot following Week 7. Hopefully we can improve on our algorithms and selection process come the 2023 season. I think there is some value to be found in optimizing across multiple entries, as well as being able to shift from minimizing the risk of being eliminated to maximizing the expected value of a set of picks conditional on who the remaining players have left in the pool."
  },
  {
    "objectID": "blog/2022-07-15-webscraping-craigslist-apartments-listings/index.html",
    "href": "blog/2022-07-15-webscraping-craigslist-apartments-listings/index.html",
    "title": "Webscraping Craigslist Apartments Listings",
    "section": "",
    "text": "While looking for an apartment to rent in Toronto, I found myself checking Craigslist multiple times throughout the day for new postings. The recent rising interest rates have led to an increased demand for rental units in Toronto, and consequently made the rental market much more competitive and difficult to maneuver. This post describes the craigslist web crawler bot I created in order to identify new relevant apartment listings, and have the results sent to your phone as push notifications."
  },
  {
    "objectID": "blog/2022-07-15-webscraping-craigslist-apartments-listings/index.html#overview",
    "href": "blog/2022-07-15-webscraping-craigslist-apartments-listings/index.html#overview",
    "title": "Webscraping Craigslist Apartments Listings",
    "section": "Overview",
    "text": "Overview\nThere are three main sections to this process:\n\nCollect listings from Craigslist using rvest\nSend push notifications to phone or watch using pushoverr\nSchedule the scraper to run in regular intervals with cronR"
  },
  {
    "objectID": "blog/2022-07-15-webscraping-craigslist-apartments-listings/index.html#collect-listings-from-craigslist",
    "href": "blog/2022-07-15-webscraping-craigslist-apartments-listings/index.html#collect-listings-from-craigslist",
    "title": "Webscraping Craigslist Apartments Listings",
    "section": "1. Collect listings from Craigslist",
    "text": "1. Collect listings from Craigslist\nThe Craigslist apartment listings URL has a logical structure:\n\"https://toronto.craigslist.org/search/toronto-on/apa?availabilityMode=0\n\\______/\\_______/\\____________________/\\________/\\___________________ ...\n   |        |               |               |                | \n scheme  location         domain         location         arguments  \nWe can alter the URL we call to filter listings to satisfy specific requirements. For example, we can use the below arguments to filter the results returned by Craigslist.\n\n\n\nArgument\nDescription\n\n\n\n\n&lat=, &lng=\nCentroid coordinates of search\n\n\n&search_distance=\nRadius of search from centroid\n\n\n&min_price=\nMinimum listing price\n\n\n&max_price=\nMax listing price\n\n\n&min_bedrooms=\nMinimum number of bedrooms\n\n\n&sort=\nSorting options, date sorts posts by latest\n\n\n\nBelow is an example of how we can generate a URL specific to the filters we are after.\n\n# Setup URL\nbase = \"https://toronto.craigslist.org/search/toronto-on/apa?availabilityMode=0&\"\nLAT = \"43.66532376779693\" # are Rotman school of management\nLNG = \"-79.39860792142129\"\nMAX_PRICE = \"3200\"\nMIN_BDRM = \"2\"\nRADIUS = \"1.2\" # is 1.9Km\nSORT = \"date\"\n\nurl = sprintf(\"%slat=%s&lon=%s&max_price=%s&min_bedrooms=%s&search_distance=%s&sort=%s\", \n              base, \n              LAT, \n              LNG, \n              MAX_PRICE, \n              MIN_BDRM, \n              RADIUS, \n              SORT)\n\nAlternatively, you can use the craigslist website to dial in your search, then copy-paste the URL containing your search query.\nWith our URL, let’s collect the listings. I suspect the .result-row, .result.page, and .result-heading selectors will line up for searching for apartment listings in other cities.\nI am building a data frame containing the post title, link, and time the post was last updated.\n\nlibrary(rvest)\n\npage = read_html(url)\n\ntitles = page |> \n  html_nodes(\".result-heading\") |> \n  html_text(trim = TRUE)\n\nlinks = page |> \n  html_nodes(\".result-row\") |> \n  html_element(\"a\") |> \n  html_attr(\"href\")\n\ntimestamp = page |> \n  html_nodes(\".result-date\") |> \n  html_attr(\"datetime\") \n\ntimestamp = as.POSIXct(timestamp, tz = \"\")\n\n# organize into a data frame\nposts = data.frame(\n  titles, \n  links,\n  timestamp\n)\n\nLet’s take a quick look at the data we’ve extracted from the page.\n\nlibrary(kableExtra)\n\nposts |> \n  head() |>\n  kbl(caption = \"Craigslist apartment listings\") |> \n  kable_paper(\"striped\", full_width = F)\n\n\n\nCraigslist apartment listings\n \n  \n    titles \n    links \n    timestamp"
  },
  {
    "objectID": "blog/2022-07-15-webscraping-craigslist-apartments-listings/index.html#sending-push-notifications",
    "href": "blog/2022-07-15-webscraping-craigslist-apartments-listings/index.html#sending-push-notifications",
    "title": "Webscraping Craigslist Apartments Listings",
    "section": "2. Sending Push Notifications",
    "text": "2. Sending Push Notifications\nWhile there are multiple tools available, I had success using the pushoverr library paired with the Pushover app. I was able to make an application using Pushover which sends push notifications to my iPhone and Apple Watch.\nI found the blog post by Brian Connelly to be helpful setting up Pushover.\n\n# call in API keys for the Pushoverr app\nsource(\"secrets.R\")\n\npush = function(data) {\n  \n  msg = data$title\n  url = data$link\n  \n  pushoverr::pushover(message = msg, \n                      user = USER_KEY, \n                      app = APP_KEY, \n                      url = url)\n  \n}\n\nNext, we need to add some logic to check the collected posts for new postings. I scheduled the script to run every 20 minutes, and so I can get away with only pushing notifications for listings with a time stamp in the last 30 minutes.\n\n# for testing, set time to keep the most recent post\n# time = as.POSIXct(Sys.time(), tz = \"\")\ntime = max(timestamp)\n\nTHRESH = 20\nnotify = posts[difftime(time, timestamp, units = \"mins\") < THRESH,  ]\n\n# send push notifications\nN = nrow(notify)\nfor(i in 1:N) {\n  \n  push(notify[i, ])\n  \n  # sleep 10s between batches of new postings\n  if(i < N) {Sys.sleep(10)}\n}"
  },
  {
    "objectID": "blog/2022-07-15-webscraping-craigslist-apartments-listings/index.html#scheduling-the-script",
    "href": "blog/2022-07-15-webscraping-craigslist-apartments-listings/index.html#scheduling-the-script",
    "title": "Webscraping Craigslist Apartments Listings",
    "section": "3. Scheduling the script",
    "text": "3. Scheduling the script\nThe magic happens when we can have the script run in the background or while we are away from the computer. cronR is the perfect tool for the job here as we can set this script to run in 20 minute intervals. A quick disclaimer, cronR runs only on unix/linux, so if you’re using Windows you will have to find another task scheduler.\n\n\n\nlibrary(cronR)\n\nscript = \"scrape.R\" # the path to your script\n\ncmd = cron_rscript(script,\n                   log_append = TRUE,\n                   log_timestamp = TRUE)\n\ncron_add(command = cmd,\n         frequency ='*/20 * * * *', # run every 20 minutes\n         id = \"CL-Toronto-Apt\",\n         description = \"Webscraping Toronto Apartments off Craigslist\",\n         tags = \"webscraping\")\n\nAnd voila! We’ve now wrote a script to download the relevant apartment listings, filter for new postings, and send us push notifications for any new listings we may want to check out.\nHere are the uninterupted scripts used. You will need to add a secrets.R file containing your pushover app API keys. My project directory looks like:\n├── bot.R\n├── schedule.R\n└── secrets.R\n\nbot.R\n\n# prepare Craigslist URL ----\nbase = \"https://toronto.craigslist.org/search/toronto-on/apa?availabilityMode=0&\"\nLAT = \"43.66532376779693\" # are Rotman school of management\nLNG = \"-79.39860792142129\"\nMAX_PRICE = \"3200\"\nMIN_BDRM = \"2\"\nRADIUS = \"1.2\" # is 1.9Km\nSORT = \"date\"\n\nurl = sprintf(\"%slat=%s&lon=%s&max_price=%s&min_bedrooms=%s&search_distance=%s&sort=%s\", \n              base, \n              LAT, \n              LNG, \n              MAX_PRICE, \n              MIN_BDRM, \n              RADIUS, \n              SORT)\n\n\n# collect listings ----\n\npage = read_html(url)\n\ntitles = page |> \n  html_nodes(\".result-heading\") |> \n  html_text(trim = TRUE)\n\nlinks = page |> \n  html_nodes(\".result-row\") |> \n  html_element(\"a\") |> \n  html_attr(\"href\")\n\ntimestamp = page |> \n  html_nodes(\".result-date\") |> \n  html_attr(\"datetime\") \n\ntimestamp = as.POSIXct(timestamp, tz = \"\")\n\n# organize into a data frame\nposts = data.frame(\n  titles, \n  links,\n  timestamp\n)\n\n\n# Send push notifications for new postings ----\n\nsource(\"secrets.R\")\n\npush = function(data) {\n  msg = data$title\n  url = data$link\n  pushoverr::pushover(message = msg, \n                      user = USER_KEY, \n                      app = APP_KEY, \n                      url = url)\n}\n\ntime = as.POSIXct(Sys.time(), tz = \"\")\n\nTHRESH = 20\nnotify = posts[difftime(time, timestamp, units = \"mins\") < THRESH,  ]\n\nN = nrow(notify)\nfor(i in 1:N) {\n  \n  push(notify[i, ])\n  \n  # sleep 10s between batches of new postings\n  if(i < N) {Sys.sleep(10)}\n}\n\n\n\nschedule.R\n\nlibrary(cronR)\n\nscript = \"scrape.R\" # the path to your script\n\ncmd = cron_rscript(script,\n                   log_append = TRUE,\n                   log_timestamp = TRUE)\n\ncron_add(command = cmd,\n         frequency ='*/20 * * * *', # run every 20 minutes\n         id = \"CL-Toronto-Apt\",\n         description = \"Webscraping Toronto Apartments off Craigslist\",\n         tags = \"webscraping\")\n\n\n\nsecrets.R\n\nUSER_KEY = \"XXXXXXXXXXXXXXXXXX\"\nAPP_KEY = \"XXXXXXXXXXXXXXXXXX\""
  },
  {
    "objectID": "misc.html",
    "href": "misc.html",
    "title": "Miscellaneous Information",
    "section": "",
    "text": "Here is a catch all for links and resources I find useful.\n\nTextbooks\n\nR for Data Science\nMastering R Shiny\nBuilding reproducible analytical pipelines with R\nCausal Inference The Mixtape\n\n\n\nBlog posts\n\nOne Year to Dissertate: Writing your dissertation in RStudio.\nYihui Xie | One Markdown Document, Fourteen Demos: Showing off some of the capabilities available in R Markdown.\nSusan Athey on Ph.D. Applications"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Jordan Hutchings",
    "section": "",
    "text": "Visualizing Strava Activities\n\n\n\n\n\n\n\nR\n\n\nData Visualization\n\n\nSpatial Data\n\n\n\n\nMapping Strava activity data onto contour maps.\n\n\n\n\n\n\nAug 20, 2023\n\n\n\n\n\n\n  \n\n\n\n\nNFL Losers Pool - 2022\n\n\n\n\n\n\n\nR\n\n\nSports Analytics\n\n\nData Visualization\n\n\n\n\nOptimizing fantasy picks in an annual NFL losers pool.\n\n\n\n\n\n\nSep 7, 2022\n\n\n\n\n\n\n  \n\n\n\n\nPlotting dynamic maps with mapview\n\n\n\n\n\n\n\nR\n\n\nSpatial Data\n\n\nData Visualization\n\n\n\n\nCool mapping features in R with mapview.\n\n\n\n\n\n\nAug 10, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWebscraping Craigslist Apartments Listings\n\n\n\n\n\n\n\nR\n\n\nCron\n\n\nWeb Scaping\n\n\n\n\nUsing R to automatically scan for apartment listings on Craigslist.\n\n\n\n\n\n\nJul 15, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMasters Fantasy Golf Tournament Dashboard\n\n\n\n\n\n\n\nSports Analytics\n\n\nCron\n\n\nGoogleSheets\n\n\nWeb Scaping\n\n\n\n\nBuilding an automated Masters fantasy pool dashboard using R and GoogleSheets.\n\n\n\n\n\n\nJun 12, 2022\n\n\n\n\n\n\nNo matching items"
  }
]